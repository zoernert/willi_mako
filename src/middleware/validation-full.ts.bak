// Validation middleware for bilateral clarifications
// Created: 12. August 2025
// Description: Input validation for bilateral clarification endpoints

import { Request, Response, NextFunction } from 'express';
// import { body, validationResult } from 'express-validator';

// Helper function to check validation results
const checkValidationResult = (req: Request, res: Response, next: NextFunction) => {
  // const errors = validationResult(req);
  if (!errors.isEmpty()) {
    return res.status(400).json({
      success: false,
      message: 'Validation failed',
      errors: errors.array()
    });
  }
  next();
};

// Validation rules for creating/updating clarifications
export const validateClarification = [
  body('title')
    .trim()
    .isLength({ min: 3, max: 255 })
    .withMessage('Title must be between 3 and 255 characters'),
  
  body('description')
    .trim()
    .isLength({ min: 10, max: 5000 })
    .withMessage('Description must be between 10 and 5000 characters'),
  
  body('priority')
    .isIn(['low', 'medium', 'high', 'urgent'])
    .withMessage('Priority must be one of: low, medium, high, urgent'),
  
  body('category')
    .trim()
    .isLength({ min: 2, max: 100 })
    .withMessage('Category must be between 2 and 100 characters'),
  
  body('deadline')
    .optional()
    .isISO8601()
    .withMessage('Deadline must be a valid ISO 8601 date'),
  
  body('assignedToId')
    .optional()
    .isUUID()
    .withMessage('Assigned user ID must be a valid UUID'),
  
  body('externalParty')
    .optional()
    .trim()
    .isLength({ max: 255 })
    .withMessage('External party must be less than 255 characters'),
  
  body('regulatoryReference')
    .optional()
    .trim()
    .isLength({ max: 255 })
    .withMessage('Regulatory reference must be less than 255 characters'),
  
  body('tags')
    .optional()
    .isArray()
    .withMessage('Tags must be an array'),
  
  body('tags.*')
    .optional()
    .trim()
    .isLength({ min: 1, max: 50 })
    .withMessage('Each tag must be between 1 and 50 characters'),
  
  checkValidationResult
];

// Validation rules for creating/updating notes
export const validateNote = [
  body('content')
    .trim()
    .isLength({ min: 1, max: 5000 })
    .withMessage('Note content must be between 1 and 5000 characters'),
  
  body('isPrivate')
    .optional()
    .isBoolean()
    .withMessage('isPrivate must be a boolean value'),
  
  body('clarificationId')
    .isUUID()
    .withMessage('Clarification ID must be a valid UUID'),
  
  checkValidationResult
];

// Validation rules for creating/updating comments
export const validateComment = [
  body('content')
    .trim()
    .isLength({ min: 1, max: 2000 })
    .withMessage('Comment content must be between 1 and 2000 characters'),
  
  body('clarificationId')
    .isUUID()
    .withMessage('Clarification ID must be a valid UUID'),
  
  body('parentCommentId')
    .optional()
    .isUUID()
    .withMessage('Parent comment ID must be a valid UUID'),
  
  checkValidationResult
];

// Additional validation helpers that might be useful
export const validateUUID = (paramName: string) => [
  body(paramName)
    .isUUID()
    .withMessage(`${paramName} must be a valid UUID`),
  checkValidationResult
];

export const validatePagination = (req: Request, res: Response, next: NextFunction) => {
  const { page, limit } = req.query;
  
  if (page && (isNaN(Number(page)) || Number(page) < 1)) {
    return res.status(400).json({
      success: false,
      message: 'Page must be a positive integer'
    });
  }
  
  if (limit && (isNaN(Number(limit)) || Number(limit) < 1 || Number(limit) > 100)) {
    return res.status(400).json({
      success: false,
      message: 'Limit must be a positive integer between 1 and 100'
    });
  }
  
  next();
};

export const validateSearch = (req: Request, res: Response, next: NextFunction) => {
  const { search } = req.query;
  
  if (search && typeof search === 'string' && search.length > 255) {
    return res.status(400).json({
      success: false,
      message: 'Search query must be less than 255 characters'
    });
  }
  
  next();
};
