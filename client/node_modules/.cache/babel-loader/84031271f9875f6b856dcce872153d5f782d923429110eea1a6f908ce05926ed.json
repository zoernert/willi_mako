{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').CompileContext} CompileContext\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').Token} Token\n */\n\n// An opening or closing tag start, followed by a case-insensitive specific tag name,\n// followed by HTML whitespace, a greater than, or a slash.\nconst reFlow = /<(\\/?)(iframe|noembed|noframes|plaintext|script|style|title|textarea|xmp)(?=[\\t\\n\\f\\r />])/gi;\n\n// As HTML (text) parses tags separately (and very strictly), we don’t need to be\n// global.\nconst reText = new RegExp('^' + reFlow.source, 'i');\n\n/**\n * Create an HTML extension for `micromark` to support GitHubs weird and\n * useless tagfilter when serializing to HTML.\n *\n * @returns {HtmlExtension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to support\n *   GitHubs weird and useless tagfilter when serializing to HTML.\n */\nexport function gfmTagfilterHtml() {\n  return {\n    exit: {\n      htmlFlowData(token) {\n        exitHtmlData.call(this, token, reFlow);\n      },\n      htmlTextData(token) {\n        exitHtmlData.call(this, token, reText);\n      }\n    }\n  };\n}\n\n/**\n * @this {CompileContext}\n * @param {Token} token\n * @param {RegExp} filter\n * @returns {undefined}\n */\nfunction exitHtmlData(token, filter) {\n  let value = this.sliceSerialize(token);\n  if (this.options.allowDangerousHtml) {\n    value = value.replace(filter, '&lt;$1$2');\n  }\n  this.raw(this.encode(value));\n}","map":{"version":3,"names":["reFlow","reText","RegExp","source","gfmTagfilterHtml","exit","htmlFlowData","token","exitHtmlData","call","htmlTextData","filter","value","sliceSerialize","options","allowDangerousHtml","replace","raw","encode"],"sources":["/home/thorsten/Development/willi_mako/client/node_modules/micromark-extension-gfm-tagfilter/lib/index.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').CompileContext} CompileContext\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').Token} Token\n */\n\n// An opening or closing tag start, followed by a case-insensitive specific tag name,\n// followed by HTML whitespace, a greater than, or a slash.\nconst reFlow =\n  /<(\\/?)(iframe|noembed|noframes|plaintext|script|style|title|textarea|xmp)(?=[\\t\\n\\f\\r />])/gi\n\n// As HTML (text) parses tags separately (and very strictly), we don’t need to be\n// global.\nconst reText = new RegExp('^' + reFlow.source, 'i')\n\n/**\n * Create an HTML extension for `micromark` to support GitHubs weird and\n * useless tagfilter when serializing to HTML.\n *\n * @returns {HtmlExtension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to support\n *   GitHubs weird and useless tagfilter when serializing to HTML.\n */\nexport function gfmTagfilterHtml() {\n  return {\n    exit: {\n      htmlFlowData(token) {\n        exitHtmlData.call(this, token, reFlow)\n      },\n      htmlTextData(token) {\n        exitHtmlData.call(this, token, reText)\n      }\n    }\n  }\n}\n\n/**\n * @this {CompileContext}\n * @param {Token} token\n * @param {RegExp} filter\n * @returns {undefined}\n */\nfunction exitHtmlData(token, filter) {\n  let value = this.sliceSerialize(token)\n\n  if (this.options.allowDangerousHtml) {\n    value = value.replace(filter, '&lt;$1$2')\n  }\n\n  this.raw(this.encode(value))\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAMA,MAAM,GACV,8FAA8F;;AAEhG;AACA;AACA,MAAMC,MAAM,GAAG,IAAIC,MAAM,CAAC,GAAG,GAAGF,MAAM,CAACG,MAAM,EAAE,GAAG,CAAC;;AAEnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,gBAAgBA,CAAA,EAAG;EACjC,OAAO;IACLC,IAAI,EAAE;MACJC,YAAYA,CAACC,KAAK,EAAE;QAClBC,YAAY,CAACC,IAAI,CAAC,IAAI,EAAEF,KAAK,EAAEP,MAAM,CAAC;MACxC,CAAC;MACDU,YAAYA,CAACH,KAAK,EAAE;QAClBC,YAAY,CAACC,IAAI,CAAC,IAAI,EAAEF,KAAK,EAAEN,MAAM,CAAC;MACxC;IACF;EACF,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASO,YAAYA,CAACD,KAAK,EAAEI,MAAM,EAAE;EACnC,IAAIC,KAAK,GAAG,IAAI,CAACC,cAAc,CAACN,KAAK,CAAC;EAEtC,IAAI,IAAI,CAACO,OAAO,CAACC,kBAAkB,EAAE;IACnCH,KAAK,GAAGA,KAAK,CAACI,OAAO,CAACL,MAAM,EAAE,UAAU,CAAC;EAC3C;EAEA,IAAI,CAACM,GAAG,CAAC,IAAI,CAACC,MAAM,CAACN,KAAK,CAAC,CAAC;AAC9B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}