{"ast":null,"code":"// To do: next major: remove.\n/**\n * @typedef {Options} MarkdownTableOptions\n *   Configuration.\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [alignDelimiters=true]\n *   Whether to align the delimiters (default: `true`);\n *   they are aligned by default:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   Pass `false` to make them staggered:\n *\n *   ```markdown\n *   | Alpha | B |\n *   | - | - |\n *   | C | Delta |\n *   ```\n * @property {ReadonlyArray<string | null | undefined> | string | null | undefined} [align]\n *   How to align columns (default: `''`);\n *   one style for all columns or styles for their respective columns;\n *   each style is either `'l'` (left), `'r'` (right), or `'c'` (center);\n *   other values are treated as `''`, which doesn‚Äôt place the colon in the\n *   alignment row but does align left;\n *   *only the lowercased first character is used, so `Right` is fine.*\n * @property {boolean | null | undefined} [delimiterEnd=true]\n *   Whether to end each row with the delimiter (default: `true`).\n *\n *   > üëâ **Note**: please don‚Äôt use this: it could create fragile structures\n *   > that aren‚Äôt understandable to some markdown parsers.\n *\n *   When `true`, there are ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B\n *   | ----- | -----\n *   | C     | Delta\n *   ```\n * @property {boolean | null | undefined} [delimiterStart=true]\n *   Whether to begin each row with the delimiter (default: `true`).\n *\n *   > üëâ **Note**: please don‚Äôt use this: it could create fragile structures\n *   > that aren‚Äôt understandable to some markdown parsers.\n *\n *   When `true`, there are starting delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no starting delimiters:\n *\n *   ```markdown\n *   Alpha | B     |\n *   ----- | ----- |\n *   C     | Delta |\n *   ```\n * @property {boolean | null | undefined} [padding=true]\n *   Whether to add a space of padding between delimiters and cells\n *   (default: `true`).\n *\n *   When `true`, there is padding:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there is no padding:\n *\n *   ```markdown\n *   |Alpha|B    |\n *   |-----|-----|\n *   |C    |Delta|\n *   ```\n * @property {((value: string) => number) | null | undefined} [stringLength]\n *   Function to detect the length of table cell content (optional);\n *   this is used when aligning the delimiters (`|`) between table cells;\n *   full-width characters and emoji mess up delimiter alignment when viewing\n *   the markdown source;\n *   to fix this, you can pass this function,\n *   which receives the cell content and returns its ‚Äúvisible‚Äù size;\n *   note that what is and isn‚Äôt visible depends on where the text is displayed.\n *\n *   Without such a function, the following:\n *\n *   ```js\n *   markdownTable([\n *     ['Alpha', 'Bravo'],\n *     ['‰∏≠Êñá', 'Charlie'],\n *     ['üë©‚Äç‚ù§Ô∏è‚Äçüë©', 'Delta']\n *   ])\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo |\n *   | - | - |\n *   | ‰∏≠Êñá | Charlie |\n *   | üë©‚Äç‚ù§Ô∏è‚Äçüë© | Delta |\n *   ```\n *\n *   With [`string-width`](https://github.com/sindresorhus/string-width):\n *\n *   ```js\n *   import stringWidth from 'string-width'\n *\n *   markdownTable(\n *     [\n *       ['Alpha', 'Bravo'],\n *       ['‰∏≠Êñá', 'Charlie'],\n *       ['üë©‚Äç‚ù§Ô∏è‚Äçüë©', 'Delta']\n *     ],\n *     {stringLength: stringWidth}\n *   )\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo   |\n *   | ----- | ------- |\n *   | ‰∏≠Êñá  | Charlie |\n *   | üë©‚Äç‚ù§Ô∏è‚Äçüë©    | Delta   |\n *   ```\n */\n\n/**\n * @param {string} value\n *   Cell value.\n * @returns {number}\n *   Cell size.\n */\nfunction defaultStringLength(value) {\n  return value.length;\n}\n\n/**\n * Generate a markdown\n * ([GFM](https://docs.github.com/en/github/writing-on-github/working-with-advanced-formatting/organizing-information-with-tables))\n * table.\n *\n * @param {ReadonlyArray<ReadonlyArray<string | null | undefined>>} table\n *   Table data (matrix of strings).\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Result.\n */\nexport function markdownTable(table, options) {\n  const settings = options || {};\n  // To do: next major: change to spread.\n  const align = (settings.align || []).concat();\n  const stringLength = settings.stringLength || defaultStringLength;\n  /** @type {Array<number>} Character codes as symbols for alignment per column. */\n  const alignments = [];\n  /** @type {Array<Array<string>>} Cells per row. */\n  const cellMatrix = [];\n  /** @type {Array<Array<number>>} Sizes of each cell per row. */\n  const sizeMatrix = [];\n  /** @type {Array<number>} */\n  const longestCellByColumn = [];\n  let mostCellsPerRow = 0;\n  let rowIndex = -1;\n\n  // This is a superfluous loop if we don‚Äôt align delimiters, but otherwise we‚Äôd\n  // do superfluous work when aligning, so optimize for aligning.\n  while (++rowIndex < table.length) {\n    /** @type {Array<string>} */\n    const row = [];\n    /** @type {Array<number>} */\n    const sizes = [];\n    let columnIndex = -1;\n    if (table[rowIndex].length > mostCellsPerRow) {\n      mostCellsPerRow = table[rowIndex].length;\n    }\n    while (++columnIndex < table[rowIndex].length) {\n      const cell = serialize(table[rowIndex][columnIndex]);\n      if (settings.alignDelimiters !== false) {\n        const size = stringLength(cell);\n        sizes[columnIndex] = size;\n        if (longestCellByColumn[columnIndex] === undefined || size > longestCellByColumn[columnIndex]) {\n          longestCellByColumn[columnIndex] = size;\n        }\n      }\n      row.push(cell);\n    }\n    cellMatrix[rowIndex] = row;\n    sizeMatrix[rowIndex] = sizes;\n  }\n\n  // Figure out which alignments to use.\n  let columnIndex = -1;\n  if (typeof align === 'object' && 'length' in align) {\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = toAlignment(align[columnIndex]);\n    }\n  } else {\n    const code = toAlignment(align);\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = code;\n    }\n  }\n\n  // Inject the alignment row.\n  columnIndex = -1;\n  /** @type {Array<string>} */\n  const row = [];\n  /** @type {Array<number>} */\n  const sizes = [];\n  while (++columnIndex < mostCellsPerRow) {\n    const code = alignments[columnIndex];\n    let before = '';\n    let after = '';\n    if (code === 99 /* `c` */) {\n      before = ':';\n      after = ':';\n    } else if (code === 108 /* `l` */) {\n      before = ':';\n    } else if (code === 114 /* `r` */) {\n      after = ':';\n    }\n\n    // There *must* be at least one hyphen-minus in each alignment cell.\n    let size = settings.alignDelimiters === false ? 1 : Math.max(1, longestCellByColumn[columnIndex] - before.length - after.length);\n    const cell = before + '-'.repeat(size) + after;\n    if (settings.alignDelimiters !== false) {\n      size = before.length + size + after.length;\n      if (size > longestCellByColumn[columnIndex]) {\n        longestCellByColumn[columnIndex] = size;\n      }\n      sizes[columnIndex] = size;\n    }\n    row[columnIndex] = cell;\n  }\n\n  // Inject the alignment row.\n  cellMatrix.splice(1, 0, row);\n  sizeMatrix.splice(1, 0, sizes);\n  rowIndex = -1;\n  /** @type {Array<string>} */\n  const lines = [];\n  while (++rowIndex < cellMatrix.length) {\n    const row = cellMatrix[rowIndex];\n    const sizes = sizeMatrix[rowIndex];\n    columnIndex = -1;\n    /** @type {Array<string>} */\n    const line = [];\n    while (++columnIndex < mostCellsPerRow) {\n      const cell = row[columnIndex] || '';\n      let before = '';\n      let after = '';\n      if (settings.alignDelimiters !== false) {\n        const size = longestCellByColumn[columnIndex] - (sizes[columnIndex] || 0);\n        const code = alignments[columnIndex];\n        if (code === 114 /* `r` */) {\n          before = ' '.repeat(size);\n        } else if (code === 99 /* `c` */) {\n          if (size % 2) {\n            before = ' '.repeat(size / 2 + 0.5);\n            after = ' '.repeat(size / 2 - 0.5);\n          } else {\n            before = ' '.repeat(size / 2);\n            after = before;\n          }\n        } else {\n          after = ' '.repeat(size);\n        }\n      }\n      if (settings.delimiterStart !== false && !columnIndex) {\n        line.push('|');\n      }\n      if (settings.padding !== false &&\n      // Don‚Äôt add the opening space if we‚Äôre not aligning and the cell is\n      // empty: there will be a closing space.\n      !(settings.alignDelimiters === false && cell === '') && (settings.delimiterStart !== false || columnIndex)) {\n        line.push(' ');\n      }\n      if (settings.alignDelimiters !== false) {\n        line.push(before);\n      }\n      line.push(cell);\n      if (settings.alignDelimiters !== false) {\n        line.push(after);\n      }\n      if (settings.padding !== false) {\n        line.push(' ');\n      }\n      if (settings.delimiterEnd !== false || columnIndex !== mostCellsPerRow - 1) {\n        line.push('|');\n      }\n    }\n    lines.push(settings.delimiterEnd === false ? line.join('').replace(/ +$/, '') : line.join(''));\n  }\n  return lines.join('\\n');\n}\n\n/**\n * @param {string | null | undefined} [value]\n *   Value to serialize.\n * @returns {string}\n *   Result.\n */\nfunction serialize(value) {\n  return value === null || value === undefined ? '' : String(value);\n}\n\n/**\n * @param {string | null | undefined} value\n *   Value.\n * @returns {number}\n *   Alignment.\n */\nfunction toAlignment(value) {\n  const code = typeof value === 'string' ? value.codePointAt(0) : 0;\n  return code === 67 /* `C` */ || code === 99 /* `c` */ ? 99 /* `c` */ : code === 76 /* `L` */ || code === 108 /* `l` */ ? 108 /* `l` */ : code === 82 /* `R` */ || code === 114 /* `r` */ ? 114 /* `r` */ : 0;\n}","map":{"version":3,"names":["defaultStringLength","value","length","markdownTable","table","options","settings","align","concat","stringLength","alignments","cellMatrix","sizeMatrix","longestCellByColumn","mostCellsPerRow","rowIndex","row","sizes","columnIndex","cell","serialize","alignDelimiters","size","undefined","push","toAlignment","code","before","after","Math","max","repeat","splice","lines","line","delimiterStart","padding","delimiterEnd","join","replace","String","codePointAt"],"sources":["/home/thorsten/Development/willi_mako/client/node_modules/markdown-table/index.js"],"sourcesContent":["// To do: next major: remove.\n/**\n * @typedef {Options} MarkdownTableOptions\n *   Configuration.\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [alignDelimiters=true]\n *   Whether to align the delimiters (default: `true`);\n *   they are aligned by default:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   Pass `false` to make them staggered:\n *\n *   ```markdown\n *   | Alpha | B |\n *   | - | - |\n *   | C | Delta |\n *   ```\n * @property {ReadonlyArray<string | null | undefined> | string | null | undefined} [align]\n *   How to align columns (default: `''`);\n *   one style for all columns or styles for their respective columns;\n *   each style is either `'l'` (left), `'r'` (right), or `'c'` (center);\n *   other values are treated as `''`, which doesn‚Äôt place the colon in the\n *   alignment row but does align left;\n *   *only the lowercased first character is used, so `Right` is fine.*\n * @property {boolean | null | undefined} [delimiterEnd=true]\n *   Whether to end each row with the delimiter (default: `true`).\n *\n *   > üëâ **Note**: please don‚Äôt use this: it could create fragile structures\n *   > that aren‚Äôt understandable to some markdown parsers.\n *\n *   When `true`, there are ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B\n *   | ----- | -----\n *   | C     | Delta\n *   ```\n * @property {boolean | null | undefined} [delimiterStart=true]\n *   Whether to begin each row with the delimiter (default: `true`).\n *\n *   > üëâ **Note**: please don‚Äôt use this: it could create fragile structures\n *   > that aren‚Äôt understandable to some markdown parsers.\n *\n *   When `true`, there are starting delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no starting delimiters:\n *\n *   ```markdown\n *   Alpha | B     |\n *   ----- | ----- |\n *   C     | Delta |\n *   ```\n * @property {boolean | null | undefined} [padding=true]\n *   Whether to add a space of padding between delimiters and cells\n *   (default: `true`).\n *\n *   When `true`, there is padding:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there is no padding:\n *\n *   ```markdown\n *   |Alpha|B    |\n *   |-----|-----|\n *   |C    |Delta|\n *   ```\n * @property {((value: string) => number) | null | undefined} [stringLength]\n *   Function to detect the length of table cell content (optional);\n *   this is used when aligning the delimiters (`|`) between table cells;\n *   full-width characters and emoji mess up delimiter alignment when viewing\n *   the markdown source;\n *   to fix this, you can pass this function,\n *   which receives the cell content and returns its ‚Äúvisible‚Äù size;\n *   note that what is and isn‚Äôt visible depends on where the text is displayed.\n *\n *   Without such a function, the following:\n *\n *   ```js\n *   markdownTable([\n *     ['Alpha', 'Bravo'],\n *     ['‰∏≠Êñá', 'Charlie'],\n *     ['üë©‚Äç‚ù§Ô∏è‚Äçüë©', 'Delta']\n *   ])\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo |\n *   | - | - |\n *   | ‰∏≠Êñá | Charlie |\n *   | üë©‚Äç‚ù§Ô∏è‚Äçüë© | Delta |\n *   ```\n *\n *   With [`string-width`](https://github.com/sindresorhus/string-width):\n *\n *   ```js\n *   import stringWidth from 'string-width'\n *\n *   markdownTable(\n *     [\n *       ['Alpha', 'Bravo'],\n *       ['‰∏≠Êñá', 'Charlie'],\n *       ['üë©‚Äç‚ù§Ô∏è‚Äçüë©', 'Delta']\n *     ],\n *     {stringLength: stringWidth}\n *   )\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo   |\n *   | ----- | ------- |\n *   | ‰∏≠Êñá  | Charlie |\n *   | üë©‚Äç‚ù§Ô∏è‚Äçüë©    | Delta   |\n *   ```\n */\n\n/**\n * @param {string} value\n *   Cell value.\n * @returns {number}\n *   Cell size.\n */\nfunction defaultStringLength(value) {\n  return value.length\n}\n\n/**\n * Generate a markdown\n * ([GFM](https://docs.github.com/en/github/writing-on-github/working-with-advanced-formatting/organizing-information-with-tables))\n * table.\n *\n * @param {ReadonlyArray<ReadonlyArray<string | null | undefined>>} table\n *   Table data (matrix of strings).\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Result.\n */\nexport function markdownTable(table, options) {\n  const settings = options || {}\n  // To do: next major: change to spread.\n  const align = (settings.align || []).concat()\n  const stringLength = settings.stringLength || defaultStringLength\n  /** @type {Array<number>} Character codes as symbols for alignment per column. */\n  const alignments = []\n  /** @type {Array<Array<string>>} Cells per row. */\n  const cellMatrix = []\n  /** @type {Array<Array<number>>} Sizes of each cell per row. */\n  const sizeMatrix = []\n  /** @type {Array<number>} */\n  const longestCellByColumn = []\n  let mostCellsPerRow = 0\n  let rowIndex = -1\n\n  // This is a superfluous loop if we don‚Äôt align delimiters, but otherwise we‚Äôd\n  // do superfluous work when aligning, so optimize for aligning.\n  while (++rowIndex < table.length) {\n    /** @type {Array<string>} */\n    const row = []\n    /** @type {Array<number>} */\n    const sizes = []\n    let columnIndex = -1\n\n    if (table[rowIndex].length > mostCellsPerRow) {\n      mostCellsPerRow = table[rowIndex].length\n    }\n\n    while (++columnIndex < table[rowIndex].length) {\n      const cell = serialize(table[rowIndex][columnIndex])\n\n      if (settings.alignDelimiters !== false) {\n        const size = stringLength(cell)\n        sizes[columnIndex] = size\n\n        if (\n          longestCellByColumn[columnIndex] === undefined ||\n          size > longestCellByColumn[columnIndex]\n        ) {\n          longestCellByColumn[columnIndex] = size\n        }\n      }\n\n      row.push(cell)\n    }\n\n    cellMatrix[rowIndex] = row\n    sizeMatrix[rowIndex] = sizes\n  }\n\n  // Figure out which alignments to use.\n  let columnIndex = -1\n\n  if (typeof align === 'object' && 'length' in align) {\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = toAlignment(align[columnIndex])\n    }\n  } else {\n    const code = toAlignment(align)\n\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = code\n    }\n  }\n\n  // Inject the alignment row.\n  columnIndex = -1\n  /** @type {Array<string>} */\n  const row = []\n  /** @type {Array<number>} */\n  const sizes = []\n\n  while (++columnIndex < mostCellsPerRow) {\n    const code = alignments[columnIndex]\n    let before = ''\n    let after = ''\n\n    if (code === 99 /* `c` */) {\n      before = ':'\n      after = ':'\n    } else if (code === 108 /* `l` */) {\n      before = ':'\n    } else if (code === 114 /* `r` */) {\n      after = ':'\n    }\n\n    // There *must* be at least one hyphen-minus in each alignment cell.\n    let size =\n      settings.alignDelimiters === false\n        ? 1\n        : Math.max(\n            1,\n            longestCellByColumn[columnIndex] - before.length - after.length\n          )\n\n    const cell = before + '-'.repeat(size) + after\n\n    if (settings.alignDelimiters !== false) {\n      size = before.length + size + after.length\n\n      if (size > longestCellByColumn[columnIndex]) {\n        longestCellByColumn[columnIndex] = size\n      }\n\n      sizes[columnIndex] = size\n    }\n\n    row[columnIndex] = cell\n  }\n\n  // Inject the alignment row.\n  cellMatrix.splice(1, 0, row)\n  sizeMatrix.splice(1, 0, sizes)\n\n  rowIndex = -1\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (++rowIndex < cellMatrix.length) {\n    const row = cellMatrix[rowIndex]\n    const sizes = sizeMatrix[rowIndex]\n    columnIndex = -1\n    /** @type {Array<string>} */\n    const line = []\n\n    while (++columnIndex < mostCellsPerRow) {\n      const cell = row[columnIndex] || ''\n      let before = ''\n      let after = ''\n\n      if (settings.alignDelimiters !== false) {\n        const size =\n          longestCellByColumn[columnIndex] - (sizes[columnIndex] || 0)\n        const code = alignments[columnIndex]\n\n        if (code === 114 /* `r` */) {\n          before = ' '.repeat(size)\n        } else if (code === 99 /* `c` */) {\n          if (size % 2) {\n            before = ' '.repeat(size / 2 + 0.5)\n            after = ' '.repeat(size / 2 - 0.5)\n          } else {\n            before = ' '.repeat(size / 2)\n            after = before\n          }\n        } else {\n          after = ' '.repeat(size)\n        }\n      }\n\n      if (settings.delimiterStart !== false && !columnIndex) {\n        line.push('|')\n      }\n\n      if (\n        settings.padding !== false &&\n        // Don‚Äôt add the opening space if we‚Äôre not aligning and the cell is\n        // empty: there will be a closing space.\n        !(settings.alignDelimiters === false && cell === '') &&\n        (settings.delimiterStart !== false || columnIndex)\n      ) {\n        line.push(' ')\n      }\n\n      if (settings.alignDelimiters !== false) {\n        line.push(before)\n      }\n\n      line.push(cell)\n\n      if (settings.alignDelimiters !== false) {\n        line.push(after)\n      }\n\n      if (settings.padding !== false) {\n        line.push(' ')\n      }\n\n      if (\n        settings.delimiterEnd !== false ||\n        columnIndex !== mostCellsPerRow - 1\n      ) {\n        line.push('|')\n      }\n    }\n\n    lines.push(\n      settings.delimiterEnd === false\n        ? line.join('').replace(/ +$/, '')\n        : line.join('')\n    )\n  }\n\n  return lines.join('\\n')\n}\n\n/**\n * @param {string | null | undefined} [value]\n *   Value to serialize.\n * @returns {string}\n *   Result.\n */\nfunction serialize(value) {\n  return value === null || value === undefined ? '' : String(value)\n}\n\n/**\n * @param {string | null | undefined} value\n *   Value.\n * @returns {number}\n *   Alignment.\n */\nfunction toAlignment(value) {\n  const code = typeof value === 'string' ? value.codePointAt(0) : 0\n\n  return code === 67 /* `C` */ || code === 99 /* `c` */\n    ? 99 /* `c` */\n    : code === 76 /* `L` */ || code === 108 /* `l` */\n      ? 108 /* `l` */\n      : code === 82 /* `R` */ || code === 114 /* `r` */\n        ? 114 /* `r` */\n        : 0\n}\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}