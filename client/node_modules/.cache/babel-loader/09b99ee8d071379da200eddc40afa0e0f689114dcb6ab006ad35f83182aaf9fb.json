{"ast":null,"code":"/**\n * @import {Options} from 'micromark-extension-gfm-strikethrough'\n * @import {Event, Extension, Resolver, State, Token, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { splice } from 'micromark-util-chunked';\nimport { classifyCharacter } from 'micromark-util-classify-character';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/**\n * Create an extension for `micromark` to enable GFM strikethrough syntax.\n *\n * @param {Options | null | undefined} [options={}]\n *   Configuration.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions`, to\n *   enable GFM strikethrough syntax.\n */\nexport function gfmStrikethrough(options) {\n  const options_ = options || {};\n  let single = options_.singleTilde;\n  const tokenizer = {\n    name: 'strikethrough',\n    tokenize: tokenizeStrikethrough,\n    resolveAll: resolveAllStrikethrough\n  };\n  if (single === null || single === undefined) {\n    single = true;\n  }\n  return {\n    text: {\n      [126]: tokenizer\n    },\n    insideSpan: {\n      null: [tokenizer]\n    },\n    attentionMarkers: {\n      null: [126]\n    }\n  };\n\n  /**\n   * Take events and resolve strikethrough.\n   *\n   * @type {Resolver}\n   */\n  function resolveAllStrikethrough(events, context) {\n    let index = -1;\n\n    // Walk through all events.\n    while (++index < events.length) {\n      // Find a token that can close.\n      if (events[index][0] === 'enter' && events[index][1].type === 'strikethroughSequenceTemporary' && events[index][1]._close) {\n        let open = index;\n\n        // Now walk back to find an opener.\n        while (open--) {\n          // Find a token that can open the closer.\n          if (events[open][0] === 'exit' && events[open][1].type === 'strikethroughSequenceTemporary' && events[open][1]._open &&\n          // If the sizes are the same:\n          events[index][1].end.offset - events[index][1].start.offset === events[open][1].end.offset - events[open][1].start.offset) {\n            events[index][1].type = 'strikethroughSequence';\n            events[open][1].type = 'strikethroughSequence';\n\n            /** @type {Token} */\n            const strikethrough = {\n              type: 'strikethrough',\n              start: Object.assign({}, events[open][1].start),\n              end: Object.assign({}, events[index][1].end)\n            };\n\n            /** @type {Token} */\n            const text = {\n              type: 'strikethroughText',\n              start: Object.assign({}, events[open][1].end),\n              end: Object.assign({}, events[index][1].start)\n            };\n\n            // Opening.\n            /** @type {Array<Event>} */\n            const nextEvents = [['enter', strikethrough, context], ['enter', events[open][1], context], ['exit', events[open][1], context], ['enter', text, context]];\n            const insideSpan = context.parser.constructs.insideSpan.null;\n            if (insideSpan) {\n              // Between.\n              splice(nextEvents, nextEvents.length, 0, resolveAll(insideSpan, events.slice(open + 1, index), context));\n            }\n\n            // Closing.\n            splice(nextEvents, nextEvents.length, 0, [['exit', text, context], ['enter', events[index][1], context], ['exit', events[index][1], context], ['exit', strikethrough, context]]);\n            splice(events, open - 1, index - open + 3, nextEvents);\n            index = open + nextEvents.length - 2;\n            break;\n          }\n        }\n      }\n    }\n    index = -1;\n    while (++index < events.length) {\n      if (events[index][1].type === 'strikethroughSequenceTemporary') {\n        events[index][1].type = \"data\";\n      }\n    }\n    return events;\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeStrikethrough(effects, ok, nok) {\n    const previous = this.previous;\n    const events = this.events;\n    let size = 0;\n    return start;\n\n    /** @type {State} */\n    function start(code) {\n      if (previous === 126 && events[events.length - 1][1].type !== \"characterEscape\") {\n        return nok(code);\n      }\n      effects.enter('strikethroughSequenceTemporary');\n      return more(code);\n    }\n\n    /** @type {State} */\n    function more(code) {\n      const before = classifyCharacter(previous);\n      if (code === 126) {\n        // If this is the third marker, exit.\n        if (size > 1) return nok(code);\n        effects.consume(code);\n        size++;\n        return more;\n      }\n      if (size < 2 && !single) return nok(code);\n      const token = effects.exit('strikethroughSequenceTemporary');\n      const after = classifyCharacter(code);\n      token._open = !after || after === 2 && Boolean(before);\n      token._close = !before || before === 2 && Boolean(after);\n      return ok(code);\n    }\n  }\n}","map":{"version":3,"names":["splice","classifyCharacter","resolveAll","gfmStrikethrough","options","options_","single","singleTilde","tokenizer","name","tokenize","tokenizeStrikethrough","resolveAllStrikethrough","undefined","text","insideSpan","null","attentionMarkers","events","context","index","length","type","_close","open","_open","end","offset","start","strikethrough","Object","assign","nextEvents","parser","constructs","slice","effects","ok","nok","previous","size","code","enter","more","before","consume","token","exit","after","Boolean"],"sources":["/home/thorsten/Development/willi_mako/client/node_modules/micromark-extension-gfm-strikethrough/lib/syntax.js"],"sourcesContent":["/**\n * @import {Options} from 'micromark-extension-gfm-strikethrough'\n * @import {Event, Extension, Resolver, State, Token, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { splice } from 'micromark-util-chunked';\nimport { classifyCharacter } from 'micromark-util-classify-character';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/**\n * Create an extension for `micromark` to enable GFM strikethrough syntax.\n *\n * @param {Options | null | undefined} [options={}]\n *   Configuration.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions`, to\n *   enable GFM strikethrough syntax.\n */\nexport function gfmStrikethrough(options) {\n  const options_ = options || {};\n  let single = options_.singleTilde;\n  const tokenizer = {\n    name: 'strikethrough',\n    tokenize: tokenizeStrikethrough,\n    resolveAll: resolveAllStrikethrough\n  };\n  if (single === null || single === undefined) {\n    single = true;\n  }\n  return {\n    text: {\n      [126]: tokenizer\n    },\n    insideSpan: {\n      null: [tokenizer]\n    },\n    attentionMarkers: {\n      null: [126]\n    }\n  };\n\n  /**\n   * Take events and resolve strikethrough.\n   *\n   * @type {Resolver}\n   */\n  function resolveAllStrikethrough(events, context) {\n    let index = -1;\n\n    // Walk through all events.\n    while (++index < events.length) {\n      // Find a token that can close.\n      if (events[index][0] === 'enter' && events[index][1].type === 'strikethroughSequenceTemporary' && events[index][1]._close) {\n        let open = index;\n\n        // Now walk back to find an opener.\n        while (open--) {\n          // Find a token that can open the closer.\n          if (events[open][0] === 'exit' && events[open][1].type === 'strikethroughSequenceTemporary' && events[open][1]._open &&\n          // If the sizes are the same:\n          events[index][1].end.offset - events[index][1].start.offset === events[open][1].end.offset - events[open][1].start.offset) {\n            events[index][1].type = 'strikethroughSequence';\n            events[open][1].type = 'strikethroughSequence';\n\n            /** @type {Token} */\n            const strikethrough = {\n              type: 'strikethrough',\n              start: Object.assign({}, events[open][1].start),\n              end: Object.assign({}, events[index][1].end)\n            };\n\n            /** @type {Token} */\n            const text = {\n              type: 'strikethroughText',\n              start: Object.assign({}, events[open][1].end),\n              end: Object.assign({}, events[index][1].start)\n            };\n\n            // Opening.\n            /** @type {Array<Event>} */\n            const nextEvents = [['enter', strikethrough, context], ['enter', events[open][1], context], ['exit', events[open][1], context], ['enter', text, context]];\n            const insideSpan = context.parser.constructs.insideSpan.null;\n            if (insideSpan) {\n              // Between.\n              splice(nextEvents, nextEvents.length, 0, resolveAll(insideSpan, events.slice(open + 1, index), context));\n            }\n\n            // Closing.\n            splice(nextEvents, nextEvents.length, 0, [['exit', text, context], ['enter', events[index][1], context], ['exit', events[index][1], context], ['exit', strikethrough, context]]);\n            splice(events, open - 1, index - open + 3, nextEvents);\n            index = open + nextEvents.length - 2;\n            break;\n          }\n        }\n      }\n    }\n    index = -1;\n    while (++index < events.length) {\n      if (events[index][1].type === 'strikethroughSequenceTemporary') {\n        events[index][1].type = \"data\";\n      }\n    }\n    return events;\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeStrikethrough(effects, ok, nok) {\n    const previous = this.previous;\n    const events = this.events;\n    let size = 0;\n    return start;\n\n    /** @type {State} */\n    function start(code) {\n      if (previous === 126 && events[events.length - 1][1].type !== \"characterEscape\") {\n        return nok(code);\n      }\n      effects.enter('strikethroughSequenceTemporary');\n      return more(code);\n    }\n\n    /** @type {State} */\n    function more(code) {\n      const before = classifyCharacter(previous);\n      if (code === 126) {\n        // If this is the third marker, exit.\n        if (size > 1) return nok(code);\n        effects.consume(code);\n        size++;\n        return more;\n      }\n      if (size < 2 && !single) return nok(code);\n      const token = effects.exit('strikethroughSequenceTemporary');\n      const after = classifyCharacter(code);\n      token._open = !after || after === 2 && Boolean(before);\n      token._close = !before || before === 2 && Boolean(after);\n      return ok(code);\n    }\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}