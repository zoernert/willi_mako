{"ast":null,"code":"/**\n * @import {\n *   CompileContext,\n *   Extension as FromMarkdownExtension,\n *   Handle as FromMarkdownHandle\n * } from 'mdast-util-from-markdown'\n * @import {ToMarkdownOptions} from 'mdast-util-gfm-footnote'\n * @import {\n *   Handle as ToMarkdownHandle,\n *   Map,\n *   Options as ToMarkdownExtension\n * } from 'mdast-util-to-markdown'\n * @import {FootnoteDefinition, FootnoteReference} from 'mdast'\n */\n\nimport { ok as assert } from 'devlop';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nfootnoteReference.peek = footnoteReferencePeek;\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCallString() {\n  this.buffer();\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCall(token) {\n  this.enter({\n    type: 'footnoteReference',\n    identifier: '',\n    label: ''\n  }, token);\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinitionLabelString() {\n  this.buffer();\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinition(token) {\n  this.enter({\n    type: 'footnoteDefinition',\n    identifier: '',\n    label: '',\n    children: []\n  }, token);\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCallString(token) {\n  const label = this.resume();\n  const node = this.stack[this.stack.length - 1];\n  assert(node.type === 'footnoteReference');\n  node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();\n  node.label = label;\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCall(token) {\n  this.exit(token);\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinitionLabelString(token) {\n  const label = this.resume();\n  const node = this.stack[this.stack.length - 1];\n  assert(node.type === 'footnoteDefinition');\n  node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();\n  node.label = label;\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinition(token) {\n  this.exit(token);\n}\n\n/** @type {ToMarkdownHandle} */\nfunction footnoteReferencePeek() {\n  return '[';\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteReference} node\n */\nfunction footnoteReference(node, _, state, info) {\n  const tracker = state.createTracker(info);\n  let value = tracker.move('[^');\n  const exit = state.enter('footnoteReference');\n  const subexit = state.enter('reference');\n  value += tracker.move(state.safe(state.associationId(node), {\n    after: ']',\n    before: value\n  }));\n  subexit();\n  exit();\n  value += tracker.move(']');\n  return value;\n}\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown`.\n */\nexport function gfmFootnoteFromMarkdown() {\n  return {\n    enter: {\n      gfmFootnoteCallString: enterFootnoteCallString,\n      gfmFootnoteCall: enterFootnoteCall,\n      gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,\n      gfmFootnoteDefinition: enterFootnoteDefinition\n    },\n    exit: {\n      gfmFootnoteCallString: exitFootnoteCallString,\n      gfmFootnoteCall: exitFootnoteCall,\n      gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,\n      gfmFootnoteDefinition: exitFootnoteDefinition\n    }\n  };\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @param {ToMarkdownOptions | null | undefined} [options]\n *   Configuration (optional).\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown`.\n */\nexport function gfmFootnoteToMarkdown(options) {\n  // To do: next major: change default.\n  let firstLineBlank = false;\n  if (options && options.firstLineBlank) {\n    firstLineBlank = true;\n  }\n  return {\n    handlers: {\n      footnoteDefinition,\n      footnoteReference\n    },\n    // This is on by default already.\n    unsafe: [{\n      character: '[',\n      inConstruct: ['label', 'phrasing', 'reference']\n    }]\n  };\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {FootnoteDefinition} node\n   */\n  function footnoteDefinition(node, _, state, info) {\n    const tracker = state.createTracker(info);\n    let value = tracker.move('[^');\n    const exit = state.enter('footnoteDefinition');\n    const subexit = state.enter('label');\n    value += tracker.move(state.safe(state.associationId(node), {\n      before: value,\n      after: ']'\n    }));\n    subexit();\n    value += tracker.move(']:');\n    if (node.children && node.children.length > 0) {\n      tracker.shift(4);\n      value += tracker.move((firstLineBlank ? '\\n' : ' ') + state.indentLines(state.containerFlow(node, tracker.current()), firstLineBlank ? mapAll : mapExceptFirst));\n    }\n    exit();\n    return value;\n  }\n}\n\n/** @type {Map} */\nfunction mapExceptFirst(line, index, blank) {\n  return index === 0 ? line : mapAll(line, index, blank);\n}\n\n/** @type {Map} */\nfunction mapAll(line, index, blank) {\n  return (blank ? '' : '    ') + line;\n}","map":{"version":3,"names":["ok","assert","normalizeIdentifier","footnoteReference","peek","footnoteReferencePeek","enterFootnoteCallString","buffer","enterFootnoteCall","token","enter","type","identifier","label","enterFootnoteDefinitionLabelString","enterFootnoteDefinition","children","exitFootnoteCallString","resume","node","stack","length","sliceSerialize","toLowerCase","exitFootnoteCall","exit","exitFootnoteDefinitionLabelString","exitFootnoteDefinition","_","state","info","tracker","createTracker","value","move","subexit","safe","associationId","after","before","gfmFootnoteFromMarkdown","gfmFootnoteCallString","gfmFootnoteCall","gfmFootnoteDefinitionLabelString","gfmFootnoteDefinition","gfmFootnoteToMarkdown","options","firstLineBlank","handlers","footnoteDefinition","unsafe","character","inConstruct","shift","indentLines","containerFlow","current","mapAll","mapExceptFirst","line","index","blank"],"sources":["/home/thorsten/Development/willi_mako/client/node_modules/mdast-util-gfm-footnote/lib/index.js"],"sourcesContent":["/**\n * @import {\n *   CompileContext,\n *   Extension as FromMarkdownExtension,\n *   Handle as FromMarkdownHandle\n * } from 'mdast-util-from-markdown'\n * @import {ToMarkdownOptions} from 'mdast-util-gfm-footnote'\n * @import {\n *   Handle as ToMarkdownHandle,\n *   Map,\n *   Options as ToMarkdownExtension\n * } from 'mdast-util-to-markdown'\n * @import {FootnoteDefinition, FootnoteReference} from 'mdast'\n */\n\nimport {ok as assert} from 'devlop'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\n\nfootnoteReference.peek = footnoteReferencePeek\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCallString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCall(token) {\n  this.enter({type: 'footnoteReference', identifier: '', label: ''}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinitionLabelString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinition(token) {\n  this.enter(\n    {type: 'footnoteDefinition', identifier: '', label: '', children: []},\n    token\n  )\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCallString(token) {\n  const label = this.resume()\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'footnoteReference')\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n  node.label = label\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCall(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinitionLabelString(token) {\n  const label = this.resume()\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'footnoteDefinition')\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n  node.label = label\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinition(token) {\n  this.exit(token)\n}\n\n/** @type {ToMarkdownHandle} */\nfunction footnoteReferencePeek() {\n  return '['\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteReference} node\n */\nfunction footnoteReference(node, _, state, info) {\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[^')\n  const exit = state.enter('footnoteReference')\n  const subexit = state.enter('reference')\n  value += tracker.move(\n    state.safe(state.associationId(node), {after: ']', before: value})\n  )\n  subexit()\n  exit()\n  value += tracker.move(']')\n  return value\n}\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown`.\n */\nexport function gfmFootnoteFromMarkdown() {\n  return {\n    enter: {\n      gfmFootnoteCallString: enterFootnoteCallString,\n      gfmFootnoteCall: enterFootnoteCall,\n      gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,\n      gfmFootnoteDefinition: enterFootnoteDefinition\n    },\n    exit: {\n      gfmFootnoteCallString: exitFootnoteCallString,\n      gfmFootnoteCall: exitFootnoteCall,\n      gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,\n      gfmFootnoteDefinition: exitFootnoteDefinition\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @param {ToMarkdownOptions | null | undefined} [options]\n *   Configuration (optional).\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown`.\n */\nexport function gfmFootnoteToMarkdown(options) {\n  // To do: next major: change default.\n  let firstLineBlank = false\n\n  if (options && options.firstLineBlank) {\n    firstLineBlank = true\n  }\n\n  return {\n    handlers: {footnoteDefinition, footnoteReference},\n    // This is on by default already.\n    unsafe: [{character: '[', inConstruct: ['label', 'phrasing', 'reference']}]\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {FootnoteDefinition} node\n   */\n  function footnoteDefinition(node, _, state, info) {\n    const tracker = state.createTracker(info)\n    let value = tracker.move('[^')\n    const exit = state.enter('footnoteDefinition')\n    const subexit = state.enter('label')\n    value += tracker.move(\n      state.safe(state.associationId(node), {before: value, after: ']'})\n    )\n    subexit()\n\n    value += tracker.move(']:')\n\n    if (node.children && node.children.length > 0) {\n      tracker.shift(4)\n\n      value += tracker.move(\n        (firstLineBlank ? '\\n' : ' ') +\n          state.indentLines(\n            state.containerFlow(node, tracker.current()),\n            firstLineBlank ? mapAll : mapExceptFirst\n          )\n      )\n    }\n\n    exit()\n\n    return value\n  }\n}\n\n/** @type {Map} */\nfunction mapExceptFirst(line, index, blank) {\n  return index === 0 ? line : mapAll(line, index, blank)\n}\n\n/** @type {Map} */\nfunction mapAll(line, index, blank) {\n  return (blank ? '' : '    ') + line\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}