{"ast":null,"code":"/**\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\n\nimport { ok as assert } from 'devlop';\nimport { defaultHandlers } from 'mdast-util-to-markdown';\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM task\n * list items in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM task list items.\n */\nexport function gfmTaskListItemFromMarkdown() {\n  return {\n    exit: {\n      taskListCheckValueChecked: exitCheck,\n      taskListCheckValueUnchecked: exitCheck,\n      paragraph: exitParagraphWithTaskListItem\n    }\n  };\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM task list\n * items in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM task list items.\n */\nexport function gfmTaskListItemToMarkdown() {\n  return {\n    unsafe: [{\n      atBreak: true,\n      character: '-',\n      after: '[:|-]'\n    }],\n    handlers: {\n      listItem: listItemWithTaskListItem\n    }\n  };\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCheck(token) {\n  // We’re always in a paragraph, in a list item.\n  const node = this.stack[this.stack.length - 2];\n  assert(node.type === 'listItem');\n  node.checked = token.type === 'taskListCheckValueChecked';\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitParagraphWithTaskListItem(token) {\n  const parent = this.stack[this.stack.length - 2];\n  if (parent && parent.type === 'listItem' && typeof parent.checked === 'boolean') {\n    const node = this.stack[this.stack.length - 1];\n    assert(node.type === 'paragraph');\n    const head = node.children[0];\n    if (head && head.type === 'text') {\n      const siblings = parent.children;\n      let index = -1;\n      /** @type {Paragraph | undefined} */\n      let firstParaghraph;\n      while (++index < siblings.length) {\n        const sibling = siblings[index];\n        if (sibling.type === 'paragraph') {\n          firstParaghraph = sibling;\n          break;\n        }\n      }\n      if (firstParaghraph === node) {\n        // Must start with a space or a tab.\n        head.value = head.value.slice(1);\n        if (head.value.length === 0) {\n          node.children.shift();\n        } else if (node.position && head.position && typeof head.position.start.offset === 'number') {\n          head.position.start.column++;\n          head.position.start.offset++;\n          node.position.start = Object.assign({}, head.position.start);\n        }\n      }\n    }\n  }\n  this.exit(token);\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {ListItem} node\n */\nfunction listItemWithTaskListItem(node, parent, state, info) {\n  const head = node.children[0];\n  const checkable = typeof node.checked === 'boolean' && head && head.type === 'paragraph';\n  const checkbox = '[' + (node.checked ? 'x' : ' ') + '] ';\n  const tracker = state.createTracker(info);\n  if (checkable) {\n    tracker.move(checkbox);\n  }\n  let value = defaultHandlers.listItem(node, parent, state, {\n    ...info,\n    ...tracker.current()\n  });\n  if (checkable) {\n    value = value.replace(/^(?:[*+-]|\\d+\\.)([\\r\\n]| {1,3})/, check);\n  }\n  return value;\n\n  /**\n   * @param {string} $0\n   * @returns {string}\n   */\n  function check($0) {\n    return $0 + checkbox;\n  }\n}","map":{"version":3,"names":["ok","assert","defaultHandlers","gfmTaskListItemFromMarkdown","exit","taskListCheckValueChecked","exitCheck","taskListCheckValueUnchecked","paragraph","exitParagraphWithTaskListItem","gfmTaskListItemToMarkdown","unsafe","atBreak","character","after","handlers","listItem","listItemWithTaskListItem","token","node","stack","length","type","checked","parent","head","children","siblings","index","firstParaghraph","sibling","value","slice","shift","position","start","offset","column","Object","assign","state","info","checkable","checkbox","tracker","createTracker","move","current","replace","check","$0"],"sources":["/home/thorsten/Development/willi_mako/client/node_modules/mdast-util-gfm-task-list-item/lib/index.js"],"sourcesContent":["/**\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\n\nimport {ok as assert} from 'devlop'\nimport {defaultHandlers} from 'mdast-util-to-markdown'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM task\n * list items in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM task list items.\n */\nexport function gfmTaskListItemFromMarkdown() {\n  return {\n    exit: {\n      taskListCheckValueChecked: exitCheck,\n      taskListCheckValueUnchecked: exitCheck,\n      paragraph: exitParagraphWithTaskListItem\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM task list\n * items in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM task list items.\n */\nexport function gfmTaskListItemToMarkdown() {\n  return {\n    unsafe: [{atBreak: true, character: '-', after: '[:|-]'}],\n    handlers: {listItem: listItemWithTaskListItem}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCheck(token) {\n  // We’re always in a paragraph, in a list item.\n  const node = this.stack[this.stack.length - 2]\n  assert(node.type === 'listItem')\n  node.checked = token.type === 'taskListCheckValueChecked'\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitParagraphWithTaskListItem(token) {\n  const parent = this.stack[this.stack.length - 2]\n\n  if (\n    parent &&\n    parent.type === 'listItem' &&\n    typeof parent.checked === 'boolean'\n  ) {\n    const node = this.stack[this.stack.length - 1]\n    assert(node.type === 'paragraph')\n    const head = node.children[0]\n\n    if (head && head.type === 'text') {\n      const siblings = parent.children\n      let index = -1\n      /** @type {Paragraph | undefined} */\n      let firstParaghraph\n\n      while (++index < siblings.length) {\n        const sibling = siblings[index]\n        if (sibling.type === 'paragraph') {\n          firstParaghraph = sibling\n          break\n        }\n      }\n\n      if (firstParaghraph === node) {\n        // Must start with a space or a tab.\n        head.value = head.value.slice(1)\n\n        if (head.value.length === 0) {\n          node.children.shift()\n        } else if (\n          node.position &&\n          head.position &&\n          typeof head.position.start.offset === 'number'\n        ) {\n          head.position.start.column++\n          head.position.start.offset++\n          node.position.start = Object.assign({}, head.position.start)\n        }\n      }\n    }\n  }\n\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {ListItem} node\n */\nfunction listItemWithTaskListItem(node, parent, state, info) {\n  const head = node.children[0]\n  const checkable =\n    typeof node.checked === 'boolean' && head && head.type === 'paragraph'\n  const checkbox = '[' + (node.checked ? 'x' : ' ') + '] '\n  const tracker = state.createTracker(info)\n\n  if (checkable) {\n    tracker.move(checkbox)\n  }\n\n  let value = defaultHandlers.listItem(node, parent, state, {\n    ...info,\n    ...tracker.current()\n  })\n\n  if (checkable) {\n    value = value.replace(/^(?:[*+-]|\\d+\\.)([\\r\\n]| {1,3})/, check)\n  }\n\n  return value\n\n  /**\n   * @param {string} $0\n   * @returns {string}\n   */\n  function check($0) {\n    return $0 + checkbox\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}