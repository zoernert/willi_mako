{"ast":null,"code":"/**\n * @import {HtmlOptions as Options} from 'micromark-extension-gfm-footnote'\n * @import {HtmlExtension} from 'micromark-util-types'\n */\n\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { sanitizeUri } from 'micromark-util-sanitize-uri';\nconst own = {}.hasOwnProperty;\n\n/** @type {Options} */\nconst emptyOptions = {};\n\n/**\n * Generate the default label that GitHub uses on backreferences.\n *\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Default label.\n */\nexport function defaultBackLabel(referenceIndex, rereferenceIndex) {\n  return 'Back to reference ' + (referenceIndex + 1) + (rereferenceIndex > 1 ? '-' + rereferenceIndex : '');\n}\n\n/**\n * Create an extension for `micromark` to support GFM footnotes when\n * serializing to HTML.\n *\n * @param {Options | null | undefined} [options={}]\n *   Configuration (optional).\n * @returns {HtmlExtension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM footnotes when serializing to HTML.\n */\nexport function gfmFootnoteHtml(options) {\n  const config = options || emptyOptions;\n  const label = config.label || 'Footnotes';\n  const labelTagName = config.labelTagName || 'h2';\n  const labelAttributes = config.labelAttributes === null || config.labelAttributes === undefined ? 'class=\"sr-only\"' : config.labelAttributes;\n  const backLabel = config.backLabel || defaultBackLabel;\n  const clobberPrefix = config.clobberPrefix === null || config.clobberPrefix === undefined ? 'user-content-' : config.clobberPrefix;\n  return {\n    enter: {\n      gfmFootnoteDefinition() {\n        const stack = this.getData('tightStack');\n        stack.push(false);\n      },\n      gfmFootnoteDefinitionLabelString() {\n        this.buffer();\n      },\n      gfmFootnoteCallString() {\n        this.buffer();\n      }\n    },\n    exit: {\n      gfmFootnoteDefinition() {\n        let definitions = this.getData('gfmFootnoteDefinitions');\n        const footnoteStack = this.getData('gfmFootnoteDefinitionStack');\n        const tightStack = this.getData('tightStack');\n        const current = footnoteStack.pop();\n        const value = this.resume();\n        if (!definitions) {\n          this.setData('gfmFootnoteDefinitions', definitions = {});\n        }\n        if (!own.call(definitions, current)) definitions[current] = value;\n        tightStack.pop();\n        this.setData('slurpOneLineEnding', true);\n        // “Hack” to prevent a line ending from showing up if we’re in a definition in\n        // an empty list item.\n        this.setData('lastWasTag');\n      },\n      gfmFootnoteDefinitionLabelString(token) {\n        let footnoteStack = this.getData('gfmFootnoteDefinitionStack');\n        if (!footnoteStack) {\n          this.setData('gfmFootnoteDefinitionStack', footnoteStack = []);\n        }\n        footnoteStack.push(normalizeIdentifier(this.sliceSerialize(token)));\n        this.resume(); // Drop the label.\n        this.buffer(); // Get ready for a value.\n      },\n      gfmFootnoteCallString(token) {\n        let calls = this.getData('gfmFootnoteCallOrder');\n        let counts = this.getData('gfmFootnoteCallCounts');\n        const id = normalizeIdentifier(this.sliceSerialize(token));\n        /** @type {number} */\n        let counter;\n        this.resume();\n        if (!calls) this.setData('gfmFootnoteCallOrder', calls = []);\n        if (!counts) this.setData('gfmFootnoteCallCounts', counts = {});\n        const index = calls.indexOf(id);\n        const safeId = sanitizeUri(id.toLowerCase());\n        if (index === -1) {\n          calls.push(id);\n          counts[id] = 1;\n          counter = calls.length;\n        } else {\n          counts[id]++;\n          counter = index + 1;\n        }\n        const reuseCounter = counts[id];\n        this.tag('<sup><a href=\"#' + clobberPrefix + 'fn-' + safeId + '\" id=\"' + clobberPrefix + 'fnref-' + safeId + (reuseCounter > 1 ? '-' + reuseCounter : '') + '\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">' + String(counter) + '</a></sup>');\n      },\n      null() {\n        const calls = this.getData('gfmFootnoteCallOrder') || [];\n        const counts = this.getData('gfmFootnoteCallCounts') || {};\n        const definitions = this.getData('gfmFootnoteDefinitions') || {};\n        let index = -1;\n        if (calls.length > 0) {\n          this.lineEndingIfNeeded();\n          this.tag('<section data-footnotes=\"\" class=\"footnotes\"><' + labelTagName + ' id=\"footnote-label\"' + (labelAttributes ? ' ' + labelAttributes : '') + '>');\n          this.raw(this.encode(label));\n          this.tag('</' + labelTagName + '>');\n          this.lineEndingIfNeeded();\n          this.tag('<ol>');\n        }\n        while (++index < calls.length) {\n          // Called definitions are always defined.\n          const id = calls[index];\n          const safeId = sanitizeUri(id.toLowerCase());\n          let referenceIndex = 0;\n          /** @type {Array<string>} */\n          const references = [];\n          while (++referenceIndex <= counts[id]) {\n            references.push('<a href=\"#' + clobberPrefix + 'fnref-' + safeId + (referenceIndex > 1 ? '-' + referenceIndex : '') + '\" data-footnote-backref=\"\" aria-label=\"' + this.encode(typeof backLabel === 'string' ? backLabel : backLabel(index, referenceIndex)) + '\" class=\"data-footnote-backref\">↩' + (referenceIndex > 1 ? '<sup>' + referenceIndex + '</sup>' : '') + '</a>');\n          }\n          const reference = references.join(' ');\n          let injected = false;\n          this.lineEndingIfNeeded();\n          this.tag('<li id=\"' + clobberPrefix + 'fn-' + safeId + '\">');\n          this.lineEndingIfNeeded();\n          this.tag(definitions[id].replace(/<\\/p>(?:\\r?\\n|\\r)?$/, function ($0) {\n            injected = true;\n            return ' ' + reference + $0;\n          }));\n          if (!injected) {\n            this.lineEndingIfNeeded();\n            this.tag(reference);\n          }\n          this.lineEndingIfNeeded();\n          this.tag('</li>');\n        }\n        if (calls.length > 0) {\n          this.lineEndingIfNeeded();\n          this.tag('</ol>');\n          this.lineEndingIfNeeded();\n          this.tag('</section>');\n        }\n      }\n    }\n  };\n}","map":{"version":3,"names":["normalizeIdentifier","sanitizeUri","own","hasOwnProperty","emptyOptions","defaultBackLabel","referenceIndex","rereferenceIndex","gfmFootnoteHtml","options","config","label","labelTagName","labelAttributes","undefined","backLabel","clobberPrefix","enter","gfmFootnoteDefinition","stack","getData","push","gfmFootnoteDefinitionLabelString","buffer","gfmFootnoteCallString","exit","definitions","footnoteStack","tightStack","current","pop","value","resume","setData","call","token","sliceSerialize","calls","counts","id","counter","index","indexOf","safeId","toLowerCase","length","reuseCounter","tag","String","null","lineEndingIfNeeded","raw","encode","references","reference","join","injected","replace","$0"],"sources":["/home/thorsten/Development/willi_mako/client/node_modules/micromark-extension-gfm-footnote/lib/html.js"],"sourcesContent":["/**\n * @import {HtmlOptions as Options} from 'micromark-extension-gfm-footnote'\n * @import {HtmlExtension} from 'micromark-util-types'\n */\n\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { sanitizeUri } from 'micromark-util-sanitize-uri';\nconst own = {}.hasOwnProperty;\n\n/** @type {Options} */\nconst emptyOptions = {};\n\n/**\n * Generate the default label that GitHub uses on backreferences.\n *\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Default label.\n */\nexport function defaultBackLabel(referenceIndex, rereferenceIndex) {\n  return 'Back to reference ' + (referenceIndex + 1) + (rereferenceIndex > 1 ? '-' + rereferenceIndex : '');\n}\n\n/**\n * Create an extension for `micromark` to support GFM footnotes when\n * serializing to HTML.\n *\n * @param {Options | null | undefined} [options={}]\n *   Configuration (optional).\n * @returns {HtmlExtension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM footnotes when serializing to HTML.\n */\nexport function gfmFootnoteHtml(options) {\n  const config = options || emptyOptions;\n  const label = config.label || 'Footnotes';\n  const labelTagName = config.labelTagName || 'h2';\n  const labelAttributes = config.labelAttributes === null || config.labelAttributes === undefined ? 'class=\"sr-only\"' : config.labelAttributes;\n  const backLabel = config.backLabel || defaultBackLabel;\n  const clobberPrefix = config.clobberPrefix === null || config.clobberPrefix === undefined ? 'user-content-' : config.clobberPrefix;\n  return {\n    enter: {\n      gfmFootnoteDefinition() {\n        const stack = this.getData('tightStack');\n        stack.push(false);\n      },\n      gfmFootnoteDefinitionLabelString() {\n        this.buffer();\n      },\n      gfmFootnoteCallString() {\n        this.buffer();\n      }\n    },\n    exit: {\n      gfmFootnoteDefinition() {\n        let definitions = this.getData('gfmFootnoteDefinitions');\n        const footnoteStack = this.getData('gfmFootnoteDefinitionStack');\n        const tightStack = this.getData('tightStack');\n        const current = footnoteStack.pop();\n        const value = this.resume();\n        if (!definitions) {\n          this.setData('gfmFootnoteDefinitions', definitions = {});\n        }\n        if (!own.call(definitions, current)) definitions[current] = value;\n        tightStack.pop();\n        this.setData('slurpOneLineEnding', true);\n        // “Hack” to prevent a line ending from showing up if we’re in a definition in\n        // an empty list item.\n        this.setData('lastWasTag');\n      },\n      gfmFootnoteDefinitionLabelString(token) {\n        let footnoteStack = this.getData('gfmFootnoteDefinitionStack');\n        if (!footnoteStack) {\n          this.setData('gfmFootnoteDefinitionStack', footnoteStack = []);\n        }\n        footnoteStack.push(normalizeIdentifier(this.sliceSerialize(token)));\n        this.resume(); // Drop the label.\n        this.buffer(); // Get ready for a value.\n      },\n      gfmFootnoteCallString(token) {\n        let calls = this.getData('gfmFootnoteCallOrder');\n        let counts = this.getData('gfmFootnoteCallCounts');\n        const id = normalizeIdentifier(this.sliceSerialize(token));\n        /** @type {number} */\n        let counter;\n        this.resume();\n        if (!calls) this.setData('gfmFootnoteCallOrder', calls = []);\n        if (!counts) this.setData('gfmFootnoteCallCounts', counts = {});\n        const index = calls.indexOf(id);\n        const safeId = sanitizeUri(id.toLowerCase());\n        if (index === -1) {\n          calls.push(id);\n          counts[id] = 1;\n          counter = calls.length;\n        } else {\n          counts[id]++;\n          counter = index + 1;\n        }\n        const reuseCounter = counts[id];\n        this.tag('<sup><a href=\"#' + clobberPrefix + 'fn-' + safeId + '\" id=\"' + clobberPrefix + 'fnref-' + safeId + (reuseCounter > 1 ? '-' + reuseCounter : '') + '\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">' + String(counter) + '</a></sup>');\n      },\n      null() {\n        const calls = this.getData('gfmFootnoteCallOrder') || [];\n        const counts = this.getData('gfmFootnoteCallCounts') || {};\n        const definitions = this.getData('gfmFootnoteDefinitions') || {};\n        let index = -1;\n        if (calls.length > 0) {\n          this.lineEndingIfNeeded();\n          this.tag('<section data-footnotes=\"\" class=\"footnotes\"><' + labelTagName + ' id=\"footnote-label\"' + (labelAttributes ? ' ' + labelAttributes : '') + '>');\n          this.raw(this.encode(label));\n          this.tag('</' + labelTagName + '>');\n          this.lineEndingIfNeeded();\n          this.tag('<ol>');\n        }\n        while (++index < calls.length) {\n          // Called definitions are always defined.\n          const id = calls[index];\n          const safeId = sanitizeUri(id.toLowerCase());\n          let referenceIndex = 0;\n          /** @type {Array<string>} */\n          const references = [];\n          while (++referenceIndex <= counts[id]) {\n            references.push('<a href=\"#' + clobberPrefix + 'fnref-' + safeId + (referenceIndex > 1 ? '-' + referenceIndex : '') + '\" data-footnote-backref=\"\" aria-label=\"' + this.encode(typeof backLabel === 'string' ? backLabel : backLabel(index, referenceIndex)) + '\" class=\"data-footnote-backref\">↩' + (referenceIndex > 1 ? '<sup>' + referenceIndex + '</sup>' : '') + '</a>');\n          }\n          const reference = references.join(' ');\n          let injected = false;\n          this.lineEndingIfNeeded();\n          this.tag('<li id=\"' + clobberPrefix + 'fn-' + safeId + '\">');\n          this.lineEndingIfNeeded();\n          this.tag(definitions[id].replace(/<\\/p>(?:\\r?\\n|\\r)?$/, function ($0) {\n            injected = true;\n            return ' ' + reference + $0;\n          }));\n          if (!injected) {\n            this.lineEndingIfNeeded();\n            this.tag(reference);\n          }\n          this.lineEndingIfNeeded();\n          this.tag('</li>');\n        }\n        if (calls.length > 0) {\n          this.lineEndingIfNeeded();\n          this.tag('</ol>');\n          this.lineEndingIfNeeded();\n          this.tag('</section>');\n        }\n      }\n    }\n  };\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}