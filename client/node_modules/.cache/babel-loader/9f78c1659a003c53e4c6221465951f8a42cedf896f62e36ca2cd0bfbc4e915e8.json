{"ast":null,"code":"/**\n * @import {Root} from 'mdast'\n * @import {Options} from 'remark-gfm'\n * @import {} from 'remark-parse'\n * @import {} from 'remark-stringify'\n * @import {Processor} from 'unified'\n */\n\nimport { gfmFromMarkdown, gfmToMarkdown } from 'mdast-util-gfm';\nimport { gfm } from 'micromark-extension-gfm';\n\n/** @type {Options} */\nconst emptyOptions = {};\n\n/**\n * Add support GFM (autolink literals, footnotes, strikethrough, tables,\n * tasklists).\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkGfm(options) {\n  // @ts-expect-error: TS is wrong about `this`.\n  // eslint-disable-next-line unicorn/no-this-assignment\n  const self = /** @type {Processor<Root>} */this;\n  const settings = options || emptyOptions;\n  const data = self.data();\n  const micromarkExtensions = data.micromarkExtensions || (data.micromarkExtensions = []);\n  const fromMarkdownExtensions = data.fromMarkdownExtensions || (data.fromMarkdownExtensions = []);\n  const toMarkdownExtensions = data.toMarkdownExtensions || (data.toMarkdownExtensions = []);\n  micromarkExtensions.push(gfm(settings));\n  fromMarkdownExtensions.push(gfmFromMarkdown());\n  toMarkdownExtensions.push(gfmToMarkdown(settings));\n}","map":{"version":3,"names":["gfmFromMarkdown","gfmToMarkdown","gfm","emptyOptions","remarkGfm","options","self","settings","data","micromarkExtensions","fromMarkdownExtensions","toMarkdownExtensions","push"],"sources":["/home/thorsten/Development/willi_mako/client/node_modules/remark-gfm/lib/index.js"],"sourcesContent":["/**\n * @import {Root} from 'mdast'\n * @import {Options} from 'remark-gfm'\n * @import {} from 'remark-parse'\n * @import {} from 'remark-stringify'\n * @import {Processor} from 'unified'\n */\n\nimport {gfmFromMarkdown, gfmToMarkdown} from 'mdast-util-gfm'\nimport {gfm} from 'micromark-extension-gfm'\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Add support GFM (autolink literals, footnotes, strikethrough, tables,\n * tasklists).\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkGfm(options) {\n  // @ts-expect-error: TS is wrong about `this`.\n  // eslint-disable-next-line unicorn/no-this-assignment\n  const self = /** @type {Processor<Root>} */ (this)\n  const settings = options || emptyOptions\n  const data = self.data()\n\n  const micromarkExtensions =\n    data.micromarkExtensions || (data.micromarkExtensions = [])\n  const fromMarkdownExtensions =\n    data.fromMarkdownExtensions || (data.fromMarkdownExtensions = [])\n  const toMarkdownExtensions =\n    data.toMarkdownExtensions || (data.toMarkdownExtensions = [])\n\n  micromarkExtensions.push(gfm(settings))\n  fromMarkdownExtensions.push(gfmFromMarkdown())\n  toMarkdownExtensions.push(gfmToMarkdown(settings))\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAQA,eAAe,EAAEC,aAAa,QAAO,gBAAgB;AAC7D,SAAQC,GAAG,QAAO,yBAAyB;;AAE3C;AACA,MAAMC,YAAY,GAAG,CAAC,CAAC;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,SAASA,CAACC,OAAO,EAAE;EACzC;EACA;EACA,MAAMC,IAAI,GAAG,8BAAgC,IAAK;EAClD,MAAMC,QAAQ,GAAGF,OAAO,IAAIF,YAAY;EACxC,MAAMK,IAAI,GAAGF,IAAI,CAACE,IAAI,CAAC,CAAC;EAExB,MAAMC,mBAAmB,GACvBD,IAAI,CAACC,mBAAmB,KAAKD,IAAI,CAACC,mBAAmB,GAAG,EAAE,CAAC;EAC7D,MAAMC,sBAAsB,GAC1BF,IAAI,CAACE,sBAAsB,KAAKF,IAAI,CAACE,sBAAsB,GAAG,EAAE,CAAC;EACnE,MAAMC,oBAAoB,GACxBH,IAAI,CAACG,oBAAoB,KAAKH,IAAI,CAACG,oBAAoB,GAAG,EAAE,CAAC;EAE/DF,mBAAmB,CAACG,IAAI,CAACV,GAAG,CAACK,QAAQ,CAAC,CAAC;EACvCG,sBAAsB,CAACE,IAAI,CAACZ,eAAe,CAAC,CAAC,CAAC;EAC9CW,oBAAoB,CAACC,IAAI,CAACX,aAAa,CAACM,QAAQ,CAAC,CAAC;AACpD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}