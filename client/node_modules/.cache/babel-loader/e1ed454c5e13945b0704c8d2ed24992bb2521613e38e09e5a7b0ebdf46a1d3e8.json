{"ast":null,"code":"/**\n * @import {CompileContext, Handle, HtmlExtension, Token} from 'micromark-util-types'\n */\n\nimport { sanitizeUri } from 'micromark-util-sanitize-uri';\n\n/**\n * Create an HTML extension for `micromark` to support GitHub autolink literal\n * when serializing to HTML.\n *\n * @returns {HtmlExtension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GitHub autolink literal when serializing to HTML.\n */\nexport function gfmAutolinkLiteralHtml() {\n  return {\n    exit: {\n      literalAutolinkEmail,\n      literalAutolinkHttp,\n      literalAutolinkWww\n    }\n  };\n}\n\n/**\n * @this {CompileContext}\n * @type {Handle}\n */\nfunction literalAutolinkWww(token) {\n  anchorFromToken.call(this, token, 'http://');\n}\n\n/**\n * @this {CompileContext}\n * @type {Handle}\n */\nfunction literalAutolinkEmail(token) {\n  anchorFromToken.call(this, token, 'mailto:');\n}\n\n/**\n * @this {CompileContext}\n * @type {Handle}\n */\nfunction literalAutolinkHttp(token) {\n  anchorFromToken.call(this, token);\n}\n\n/**\n * @this CompileContext\n * @param {Token} token\n * @param {string | null | undefined} [protocol]\n * @returns {undefined}\n */\nfunction anchorFromToken(token, protocol) {\n  const url = this.sliceSerialize(token);\n  this.tag('<a href=\"' + sanitizeUri((protocol || '') + url) + '\">');\n  this.raw(this.encode(url));\n  this.tag('</a>');\n}","map":{"version":3,"names":["sanitizeUri","gfmAutolinkLiteralHtml","exit","literalAutolinkEmail","literalAutolinkHttp","literalAutolinkWww","token","anchorFromToken","call","protocol","url","sliceSerialize","tag","raw","encode"],"sources":["/home/thorsten/Development/willi_mako/client/node_modules/micromark-extension-gfm-autolink-literal/lib/html.js"],"sourcesContent":["/**\n * @import {CompileContext, Handle, HtmlExtension, Token} from 'micromark-util-types'\n */\n\nimport { sanitizeUri } from 'micromark-util-sanitize-uri';\n\n/**\n * Create an HTML extension for `micromark` to support GitHub autolink literal\n * when serializing to HTML.\n *\n * @returns {HtmlExtension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GitHub autolink literal when serializing to HTML.\n */\nexport function gfmAutolinkLiteralHtml() {\n  return {\n    exit: {\n      literalAutolinkEmail,\n      literalAutolinkHttp,\n      literalAutolinkWww\n    }\n  };\n}\n\n/**\n * @this {CompileContext}\n * @type {Handle}\n */\nfunction literalAutolinkWww(token) {\n  anchorFromToken.call(this, token, 'http://');\n}\n\n/**\n * @this {CompileContext}\n * @type {Handle}\n */\nfunction literalAutolinkEmail(token) {\n  anchorFromToken.call(this, token, 'mailto:');\n}\n\n/**\n * @this {CompileContext}\n * @type {Handle}\n */\nfunction literalAutolinkHttp(token) {\n  anchorFromToken.call(this, token);\n}\n\n/**\n * @this CompileContext\n * @param {Token} token\n * @param {string | null | undefined} [protocol]\n * @returns {undefined}\n */\nfunction anchorFromToken(token, protocol) {\n  const url = this.sliceSerialize(token);\n  this.tag('<a href=\"' + sanitizeUri((protocol || '') + url) + '\">');\n  this.raw(this.encode(url));\n  this.tag('</a>');\n}"],"mappings":"AAAA;AACA;AACA;;AAEA,SAASA,WAAW,QAAQ,6BAA6B;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,sBAAsBA,CAAA,EAAG;EACvC,OAAO;IACLC,IAAI,EAAE;MACJC,oBAAoB;MACpBC,mBAAmB;MACnBC;IACF;EACF,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA,SAASA,kBAAkBA,CAACC,KAAK,EAAE;EACjCC,eAAe,CAACC,IAAI,CAAC,IAAI,EAAEF,KAAK,EAAE,SAAS,CAAC;AAC9C;;AAEA;AACA;AACA;AACA;AACA,SAASH,oBAAoBA,CAACG,KAAK,EAAE;EACnCC,eAAe,CAACC,IAAI,CAAC,IAAI,EAAEF,KAAK,EAAE,SAAS,CAAC;AAC9C;;AAEA;AACA;AACA;AACA;AACA,SAASF,mBAAmBA,CAACE,KAAK,EAAE;EAClCC,eAAe,CAACC,IAAI,CAAC,IAAI,EAAEF,KAAK,CAAC;AACnC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,eAAeA,CAACD,KAAK,EAAEG,QAAQ,EAAE;EACxC,MAAMC,GAAG,GAAG,IAAI,CAACC,cAAc,CAACL,KAAK,CAAC;EACtC,IAAI,CAACM,GAAG,CAAC,WAAW,GAAGZ,WAAW,CAAC,CAACS,QAAQ,IAAI,EAAE,IAAIC,GAAG,CAAC,GAAG,IAAI,CAAC;EAClE,IAAI,CAACG,GAAG,CAAC,IAAI,CAACC,MAAM,CAACJ,GAAG,CAAC,CAAC;EAC1B,IAAI,CAACE,GAAG,CAAC,MAAM,CAAC;AAClB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}